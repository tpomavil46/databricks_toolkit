-- SQL Function Library
-- Generated by Databricks Toolkit

-- clean_string: Clean and standardize string values

CREATE OR REPLACE FUNCTION clean_string(
    input_string STRING,
    remove_special_chars BOOLEAN DEFAULT TRUE,
    trim_whitespace BOOLEAN DEFAULT TRUE,
    to_lowercase BOOLEAN DEFAULT FALSE
) RETURNS STRING AS $$
    SELECT CASE 
        WHEN input_string IS NULL THEN NULL
        WHEN trim_whitespace THEN 
            CASE 
                WHEN remove_special_chars THEN 
                    CASE 
                        WHEN to_lowercase THEN LOWER(REGEXP_REPLACE(TRIM(input_string), '[^a-zA-Z0-9\s]', ''))
                        ELSE REGEXP_REPLACE(TRIM(input_string), '[^a-zA-Z0-9\s]', '')
                    END
                ELSE 
                    CASE 
                        WHEN to_lowercase THEN LOWER(TRIM(input_string))
                        ELSE TRIM(input_string)
                    END
            END
        ELSE 
            CASE 
                WHEN remove_special_chars THEN 
                    CASE 
                        WHEN to_lowercase THEN LOWER(REGEXP_REPLACE(input_string, '[^a-zA-Z0-9\s]', ''))
                        ELSE REGEXP_REPLACE(input_string, '[^a-zA-Z0-9\s]', '')
                    END
                ELSE 
                    CASE 
                        WHEN to_lowercase THEN LOWER(input_string)
                        ELSE input_string
                    END
            END
    END
$$;


-- validate_email: Validate email format using regex

CREATE OR REPLACE FUNCTION validate_email(email STRING) RETURNS BOOLEAN AS $$
    SELECT CASE 
        WHEN email IS NULL THEN FALSE
        WHEN email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' THEN TRUE
        ELSE FALSE
    END
$$;


-- extract_domain: Extract domain from email address

CREATE OR REPLACE FUNCTION extract_domain(email STRING) RETURNS STRING AS $$
    SELECT CASE 
        WHEN email IS NULL THEN NULL
        WHEN email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' 
        THEN REGEXP_EXTRACT(email, '@([^@]+)$', 1)
        ELSE NULL
    END
$$;


-- age_in_days: Calculate age in days between two dates

CREATE OR REPLACE FUNCTION age_in_days(
    start_date DATE,
    end_date DATE DEFAULT CURRENT_DATE()
) RETURNS INT AS $$
    SELECT DATEDIFF(end_date, start_date)
$$;


-- business_days_between: Calculate business days between two dates

CREATE OR REPLACE FUNCTION business_days_between(
    start_date DATE,
    end_date DATE
) RETURNS INT AS $$
    SELECT DATEDIFF(end_date, start_date) - 
           (DATEDIFF(end_date, start_date) / 7) * 2 -
           CASE WHEN DAYOFWEEK(start_date) = 1 THEN 1 ELSE 0 END -
           CASE WHEN DAYOFWEEK(end_date) = 7 THEN 1 ELSE 0 END
$$;


-- is_weekend: Check if a date falls on weekend

CREATE OR REPLACE FUNCTION is_weekend(check_date DATE) RETURNS BOOLEAN AS $$
    SELECT DAYOFWEEK(check_date) IN (1, 7)
$$;


-- calculate_percentage: Calculate percentage with null handling

CREATE OR REPLACE FUNCTION calculate_percentage(
    numerator DECIMAL(10,2),
    denominator DECIMAL(10,2),
    decimal_places INT DEFAULT 2
) RETURNS DECIMAL(10,2) AS $$
    SELECT CASE 
        WHEN denominator IS NULL OR denominator = 0 THEN NULL
        ELSE ROUND((numerator * 100.0 / denominator), decimal_places)
    END
$$;


-- safe_division: Safe division with null handling

CREATE OR REPLACE FUNCTION safe_division(
    numerator DECIMAL(10,2),
    denominator DECIMAL(10,2),
    default_value DECIMAL(10,2) DEFAULT NULL
) RETURNS DECIMAL(10,2) AS $$
    SELECT CASE 
        WHEN denominator IS NULL OR denominator = 0 THEN default_value
        ELSE numerator / denominator
    END
$$;


-- is_in_range: Check if value is within specified range

CREATE OR REPLACE FUNCTION is_in_range(
    value DECIMAL(10,2),
    min_value DECIMAL(10,2),
    max_value DECIMAL(10,2),
    include_bounds BOOLEAN DEFAULT TRUE
) RETURNS BOOLEAN AS $$
    SELECT CASE 
        WHEN value IS NULL THEN FALSE
        WHEN include_bounds THEN value BETWEEN min_value AND max_value
        ELSE value > min_value AND value < max_value
    END
$$;


-- data_quality_score: Calculate data quality score based on multiple checks

CREATE OR REPLACE FUNCTION data_quality_score(
    completeness_score DECIMAL(3,2),
    accuracy_score DECIMAL(3,2),
    consistency_score DECIMAL(3,2),
    validity_score DECIMAL(3,2),
    weights STRING DEFAULT '0.25,0.25,0.25,0.25'
) RETURNS DECIMAL(3,2) AS $$
    SELECT ROUND(
        (completeness_score * 0.25 + 
         accuracy_score * 0.25 + 
         consistency_score * 0.25 + 
         validity_score * 0.25), 2
    )
$$;


-- null_percentage: Calculate percentage of null values in a column

CREATE OR REPLACE FUNCTION null_percentage(
    column_value STRING
) RETURNS DECIMAL(5,2) AS $$
    SELECT CASE 
        WHEN column_value IS NULL THEN 100.0
        ELSE 0.0
    END
$$;


-- customer_segment: Segment customers based on total spend

CREATE OR REPLACE FUNCTION customer_segment(
    total_spend DECIMAL(10,2)
) RETURNS STRING AS $$
    SELECT CASE 
        WHEN total_spend >= 10000 THEN 'Premium'
        WHEN total_spend >= 5000 THEN 'Gold'
        WHEN total_spend >= 1000 THEN 'Silver'
        ELSE 'Bronze'
    END
$$;


-- order_status: Determine order status based on business rules

CREATE OR REPLACE FUNCTION order_status(
    order_date DATE,
    ship_date DATE,
    delivery_date DATE,
    cancel_date DATE
) RETURNS STRING AS $$
    SELECT CASE 
        WHEN cancel_date IS NOT NULL THEN 'Cancelled'
        WHEN delivery_date IS NOT NULL THEN 'Delivered'
        WHEN ship_date IS NOT NULL THEN 'Shipped'
        WHEN order_date IS NOT NULL THEN 'Ordered'
        ELSE 'Unknown'
    END
$$;


